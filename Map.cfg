# libSFX Memory Map (Mode 20 "LoROM" mapping with 4*32kB banks)
# David Lindecrantz <optiroc@gmail.com>

SYMBOLS {
    __STACKSIZE__: type = weak, value = $100;
    __ZPADSIZE__:  type = weak, value = $10;
    __ZNMISIZE__:  type = weak, value = $10;
    __RPADSIZE__:  type = weak, value = $100;
}

MEMORY {
    ZPAD:       start = $000000, size = __ZPADSIZE__, define = yes;
    ZNMI:       start = __ZPADSIZE__, size = __ZNMISIZE__, define = yes;
    ZPAGE:      start = __ZPADSIZE__ + __ZNMISIZE__, size = $100 - (__ZPADSIZE__ + __ZNMISIZE__), define = yes;
    LORAM:      start = $000100, size = $1f00 - __STACKSIZE__, define = yes;
    STACK:      start = $002000 - __STACKSIZE__, size = __STACKSIZE__, define = yes;
    HIRAM:      start = $7e2000, size = $e000, define = yes;
    EXRAM:      start = $7f0000, size = $10000, define = yes;

    ROM0:       start = $808000, size = $8000, fill = yes, fillval = $ff;
    ROM1:       start = $818000, size = $8000, fill = yes, fillval = $ff;

    SMPZPAGE:   start = $0002, size = $00ee;
    SMPMMIO:    start = $00f0, size = $0010;
    SMPSTACK:   start = $0100, size = $0100;
    SMPRAM:     start = $0200, size = $fdc0;
}

SEGMENTS {
    ZPAD:       load = ZPAD,        type = zp,  optional = yes;
    ZNMI:       load = ZNMI,        type = zp,  optional = yes;
    ZEROPAGE:   load = ZPAGE,       type = zp,  optional = yes;
    BSS:        load = LORAM,       type = bss, optional = yes;
    LORAM:      load = LORAM,       type = bss, optional = yes;
    HIRAM:      load = HIRAM,       type = bss, optional = yes;
    EXRAM:      load = EXRAM,       type = bss, optional = yes;

	ROM0:       load = ROM0,        type = ro;
    LIBSFX:     load = ROM0,        type = ro, optional = yes;
    LIBSFX_PKG: load = ROM0,        type = ro, optional = yes;
    LIBSFX_SMP: load = ROM0,        type = rw, run = SMPZPAGE, optional = yes, define = yes;
    SMPCODE:    load = ROM0,        type = rw, run = SMPRAM, optional = yes, define = yes;
    HEADER:     load = ROM0,        type = ro, start = $80ffb0;
    VECTORS:    load = ROM0,        type = ro, start = $80ffe0;

    CODE:       load = ROM1,        type = ro;
    RODATA:     load = ROM1,        type = ro, optional = yes;

    SMPZPAGE:   load = SMPZPAGE,    type = zp, optional = yes;
    SMPRAM:     load = SMPRAM,      type = bss, optional = yes;
}
